name: Build Cross-Platform Installers

on:
  push:
    tags:
      - 'v0.[0-9][0-9]*'   # v0.00, v0.01, v0.02, etc.
      - '*installers*'     # Any tag containing 'installers'
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  build-linux-installer:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller Pillow icnsutil

    - name: Install system Qt libraries (Linux only)
      run: |
        sudo apt-get update
        sudo apt-get install -y libxcb-xinerama0 libxcb-xinerama0-dev libxcb1 libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 libxcb-shape0 libxcb-randr0 libxcb-xfixes0 libxcb-sync1 libxcb-xkb1 libxkbcommon-x11-0

    - name: Build Linux installer
      run: |
        python build_installers.py --platform linux --version ${{ github.ref_name }}

    - name: Upload Linux installer
      uses: actions/upload-artifact@v4
      with:
        name: metavinci-linux-installer
        path: release/linux/*.deb
        retention-days: 30

  build-windows-installer:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller Pillow icnsutil

    - name: Install cx_Freeze
      run: pip install cx_Freeze

    - name: Generate icons
      run: python generate_icons.py

    - name: List files after icon generation
      run: |
        echo "==================== PROJECT ROOT FILES (AFTER ICON GENERATION) ===================="
        dir
        echo "==============================================================================="

    - name: Check cx_Freeze version and location
      run: |
        python -c "import cx_Freeze; print('cx_Freeze version:', cx_Freeze.__version__); print('cx_Freeze location:', cx_Freeze.__file__)"
        python -c "import setuptools; print('setuptools location:', setuptools.__file__)"

    - name: Build Windows installer (PyInstaller + cx_Freeze)
      run: python build_installers.py --platform windows --version ${{ github.ref_name }}

    - name: Download lessmsi
      run: |
        curl -L -o lessmsi.zip https://github.com/activescott/lessmsi/releases/download/v1.10.0/lessmsi-v1.10.0.zip
        tar -xf lessmsi.zip

    - name: Upload Windows MSI installer
      uses: actions/upload-artifact@v4
      with:
        name: metavinci-windows-msi-installer
        path: dist/*.msi
        retention-days: 30

  build-macos-installer:
    environment: installers
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - runner: macos-13
            arch: amd64
          - runner: macos-latest
            arch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller Pillow icnsutil

      - name: Build macOS installer
        run: |
          python build_installers.py --platform macos --version ${{ github.ref_name }}

      - name: List .app bundles
        run: |
          echo "Listing contents of build/dist/mac/:"
          ls -lR build/dist/mac/

      - name: Ensure .app bundle exists
        run: |
          if [ -d build/dist/mac/metavinci_desktop ] && [ ! -d build/dist/mac/metavinci_desktop.app ]; then
            echo "Renaming 'metavinci_desktop' to 'metavinci_desktop.app'"
            mv build/dist/mac/metavinci_desktop build/dist/mac/metavinci_desktop.app
          elif [ -d build/dist/mac/metavinci_desktop.app ]; then
            echo "'metavinci_desktop.app' already exists."
          else
            echo "No 'metavinci_desktop' or 'metavinci_desktop.app' found in build/dist/mac/"
            exit 1
          fi

      - name: List contents of .app bundle
        run: |
          echo "Listing contents of build/dist/mac/metavinci_desktop.app:"
          ls -lR build/dist/mac/metavinci_desktop.app || echo "No .app bundle found"

      - name: List contents of MacOS directory
        run: |
          ls -l build/dist/mac/metavinci_desktop.app/Contents/MacOS || echo "No MacOS directory"

      - name: List contents of Resources directory
        run: |
          ls -l build/dist/mac/metavinci_desktop.app/Contents/Resources || echo "No Resources directory"

      - name: Final check for .app bundle (absolute path)
        run: |
          APP_BUNDLE="$(pwd)/build/dist/mac/metavinci_desktop.app"
          echo "Absolute path: $APP_BUNDLE"
          ls -ld "$APP_BUNDLE"
          ls -l "$APP_BUNDLE"

      - name: Create temporary keychain and import Developer ID certificates
        env:
          MACOS_APPLICATION_P12: ${{ secrets.MACOS_APPLICATION_P12 }}
          MACOS_INSTALLER_P12: ${{ secrets.MACOS_INSTALLER_P12 }}
          MACOS_CERT_PW: ${{ secrets.MACOS_CERT_PW }}
        run: |
          set -eo pipefail

          # Generate a random keychain password at runtime and mask it
          KC_PW="$(openssl rand -base64 32)"
          echo "::add-mask::$KC_PW"

          # Create and unlock a build-scoped keychain
          security create-keychain -p "$KC_PW" build.keychain
          security set-keychain-settings -lut 21600 build.keychain
          security unlock-keychain -p "$KC_PW" build.keychain
          security list-keychains -d user -s build.keychain login.keychain
          security default-keychain -s build.keychain
          echo "Default keychain set to: $(security default-keychain | tr -d '"')"

          # Import Application signing certificate (.p12)
          echo "$MACOS_APPLICATION_P12" | base64 -D > app.p12
          security import app.p12 -k build.keychain -P "$MACOS_CERT_PW" -T /usr/bin/codesign

          # Import Installer signing certificate (.p12) (kept for future .pkg signing)
          echo "$MACOS_INSTALLER_P12" | base64 -D > installer.p12
          security import installer.p12 -k build.keychain -P "$MACOS_CERT_PW" -T /usr/bin/productsign || true

          # Allow codesign/productsign to access the imported keys non-interactively
          security set-key-partition-list -S "apple-tool:,apple:" -s -k "$KC_PW" build.keychain

          # Capture identities (use SHA-1 hash which is most robust for -s)
          APP_IDENTITY_HASH=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application" | head -n1 | awk '{print $2}')
          if [ -z "$APP_IDENTITY_HASH" ]; then
            echo "Failed to locate 'Developer ID Application' identity in keychain" >&2
            security find-identity -v -p codesigning build.keychain | cat
            exit 1
          fi
          echo "Using Application identity: $APP_IDENTITY_HASH"

          echo "Available signing identities in build.keychain:" 
          security find-identity -v -p codesigning build.keychain | cat

          echo "APP_IDENTITY_HASH=$APP_IDENTITY_HASH" >> "$GITHUB_ENV"

      - name: Code sign .app with hardened runtime
        run: |
          set -eo pipefail
          APP_BUNDLE="$(pwd)/build/dist/mac/metavinci_desktop.app"
          if [ ! -d "$APP_BUNDLE" ]; then
            echo "App bundle not found at $APP_BUNDLE" >&2
            exit 1
          fi

          # Sign the entire bundle. While --deep is not ideal, it helps cover nested items in simple apps.
          codesign --force --options runtime --timestamp \
            --sign "$APP_IDENTITY_HASH" --deep "$APP_BUNDLE"

          # Verify signature
          codesign --verify --deep --strict --verbose=2 "$APP_BUNDLE" | cat
          spctl -a -vv "$APP_BUNDLE" | cat || true

          echo "Signed app details:"
          codesign -dv --verbose=4 "$APP_BUNDLE" 2>&1 | cat || true

      - name: Create DMG from .app bundle
        run: |
          APP_BUNDLE="$(pwd)/build/dist/mac/metavinci_desktop.app"
          if [ ! -d "$APP_BUNDLE" ]; then
            echo "No .app bundle found at $APP_BUNDLE"
            exit 1
          fi
          mkdir -p release/mac
          ARCH="${{ matrix.arch }}"
          hdiutil create -volname "Metavinci" -srcfolder "$APP_BUNDLE" -ov -format UDZO "release/mac/metavinci_desktop_${{ github.ref_name }}_${ARCH}.dmg"

      - name: Code sign DMG
        run: |
          set -eo pipefail
          ARCH="${{ matrix.arch }}"
          DMG_PATH="release/mac/metavinci_desktop_${{ github.ref_name }}_${ARCH}.dmg"
          if [ ! -f "$DMG_PATH" ]; then
            echo "DMG not found at $DMG_PATH" >&2
            exit 1
          fi
          codesign --force --timestamp --sign "$APP_IDENTITY_HASH" "$DMG_PATH"

          echo "Signed DMG details:"
          codesign -dv --verbose=4 "$DMG_PATH" 2>&1 | cat || true

      - name: Verify DMG integrity
        run: |
          ARCH="${{ matrix.arch }}"
          DMG_PATH="release/mac/metavinci_desktop_${{ github.ref_name }}_${ARCH}.dmg"
          echo "Verifying DMG at $DMG_PATH"
          hdiutil verify "$DMG_PATH"
          echo "Attempting to mount DMG..."
          MOUNT_OUTPUT=$(hdiutil attach "$DMG_PATH" -nobrowse -readonly)
          echo "$MOUNT_OUTPUT"
          MOUNT_POINT=$(echo "$MOUNT_OUTPUT" | grep Volumes | awk '{print $3}')
          if [ -z "$MOUNT_POINT" ]; then
            echo "Failed to mount DMG."
            exit 1
          fi
          echo "Mounted at $MOUNT_POINT"
          ls -lR "$MOUNT_POINT"
          hdiutil detach "$MOUNT_POINT"

      - name: Notarize DMG with Apple ID (notarytool)
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_ID_APP_PW: ${{ secrets.APPLE_ID_APP_PW }}
        run: |
          set -eo pipefail
          ARCH="${{ matrix.arch }}"
          DMG_PATH="release/mac/metavinci_desktop_${{ github.ref_name }}_${ARCH}.dmg"

          # Store credentials in the temporary keychain profile
          xcrun notarytool store-credentials "AC_PROFILE" \
            --apple-id "$APPLE_ID" \
            --team-id "$APPLE_TEAM_ID" \
            --password "$APPLE_ID_APP_PW"

          # Submit and wait for completion; capture JSON to extract submission id
          xcrun notarytool submit "$DMG_PATH" --keychain-profile "AC_PROFILE" --wait --progress --output-format json | tee notarytool_submit.json

          SUBMISSION_ID=$(python3 -c "import json,sys;print(json.load(open('notarytool_submit.json')).get('id',''))" || echo "")
          if [ -n "$SUBMISSION_ID" ]; then
            echo "Notarytool submission id: $SUBMISSION_ID"
            echo "Fetching notarization log:"
            xcrun notarytool log "$SUBMISSION_ID" --keychain-profile "AC_PROFILE" | cat || true
          else
            echo "Warning: Could not extract submission id from notarytool output" >&2
            cat notarytool_submit.json || true
          fi

      - name: Staple notarization ticket to DMG
        run: |
          set -eo pipefail
          ARCH="${{ matrix.arch }}"
          DMG_PATH="release/mac/metavinci_desktop_${{ github.ref_name }}_${ARCH}.dmg"
          xcrun stapler staple "$DMG_PATH"
          echo "Validating stapled DMG:"
          xcrun stapler validate "$DMG_PATH" | cat || true

      - name: Upload macOS DMG installer
        uses: actions/upload-artifact@v4
        with:
          name: metavinci-macos-installer-${{ matrix.arch }}
          path: release/mac/*.dmg
          retention-days: 30

  create-release:
    runs-on: ubuntu-latest
    needs: [build-linux-installer, build-windows-installer, build-macos-installer]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all installers
      uses: actions/download-artifact@v4
      with:
        path: installers

    - name: Prepare release assets
      run: |
        mkdir -p release
        cp installers/metavinci-linux-installer/*.deb release/
        cp installers/metavinci-windows-msi-installer/*.msi release/
        cp installers/metavinci-macos-installer-amd64/*.dmg release/
        cp installers/metavinci-macos-installer-arm64/*.dmg release/

    - name: Upload release assets
      uses: actions/upload-artifact@v4
      with:
        name: metavinci-release
        path: release/
        retention-days: 90

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: release/*
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body: |
          ## Metavinci ${{ github.ref_name }}
          
          Cross-platform release with executables for Linux, Windows, and macOS.
          
          ### Downloads
          - **Linux**: `.deb` package (x86_64)
          - **Windows**: `.msi` installer (x86_64)
          - **macOS (Intel/AMD)**: `.dmg` installer labeled `amd64`
          - **macOS (Apple Silicon)**: `.dmg` installer labeled `arm64`
          
          Please download the correct DMG for your Mac architecture.
          
          See README.md in the release for installation instructions.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 