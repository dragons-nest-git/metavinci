name: Build Cross-Platform

on:
  push:
    tags: [ 'v*' ]  # Trigger on version tags like v0.01, v1.0.0, etc.
  workflow_dispatch:  # Allow manual trigger

jobs:
  build:
    strategy:
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.8, 3.9, 3.10, 3.11]
        exclude:
          # Exclude some combinations to reduce build time
          - platform: ubuntu-latest
            python-version: 3.8
          - platform: windows-latest
            python-version: 3.8
          - platform: macos-latest
            python-version: 3.8

    runs-on: ${{ matrix.platform }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Create platform-specific icon files
      run: |
        # Create placeholder icon files if they don't exist
        if [ "$RUNNER_OS" = "Windows" ]; then
          # Windows - create .ico placeholder
          if [ ! -f "hvym_logo_64.ico" ]; then
            echo "Creating placeholder .ico file"
            # You can add actual icon creation logic here
            touch hvym_logo_64.ico
          fi
        elif [ "$RUNNER_OS" = "macOS" ]; then
          # macOS - create .icns placeholder
          if [ ! -f "hvym_logo_64.icns" ]; then
            echo "Creating placeholder .icns file"
            touch hvym_logo_64.icns
          fi
        else
          # Linux - create .png placeholder
          if [ ! -f "hvym_logo_64.png" ]; then
            echo "Creating placeholder .png file"
            touch hvym_logo_64.png
          fi
        fi

    - name: Run cross-platform tests
      run: |
        python test_cross_platform.py

    - name: Build executable
      run: |
        python build_cross_platform.py --platform ${{ matrix.platform == 'ubuntu-latest' && 'linux' || matrix.platform == 'windows-latest' && 'windows' || 'macos' }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: metavinci-${{ matrix.platform }}-py${{ matrix.python-version }}
        path: |
          build/dist/*/metavinci*
          build/dist/*/metavinci.exe
        retention-days: 30

  build-all-platforms:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Create release assets
      run: |
        mkdir -p release-assets
        
        # Find all executables and rename them appropriately
        find artifacts -name "metavinci*" -type f | while read file; do
          platform=$(echo "$file" | sed 's/.*metavinci-\([^-]*\)-py[^-]*.*/\1/')
          python_version=$(echo "$file" | sed 's/.*py\([^-]*\).*/\1/')
          extension=""
          
          if [[ "$platform" == "windows-latest" ]]; then
            extension=".exe"
          fi
          
          new_name="metavinci-${platform}-py${python_version}${extension}"
          cp "$file" "release-assets/$new_name"
        done
        
        # Create a summary file
        echo "Metavinci Build Assets" > release-assets/README.md
        echo "=====================" >> release-assets/README.md
        echo "" >> release-assets/README.md
        echo "Built executables for different platforms and Python versions:" >> release-assets/README.md
        echo "" >> release-assets/README.md
        ls -la release-assets/ >> release-assets/README.md

    - name: Upload release assets
      uses: actions/upload-artifact@v3
      with:
        name: release-assets
        path: release-assets/
        retention-days: 90

  test-build:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Download Linux build
      uses: actions/download-artifact@v3
      with:
        name: metavinci-ubuntu-latest-py3.11
        path: linux-build

    - name: Test Linux executable
      run: |
        chmod +x linux-build/metavinci
        # Basic test - check if executable runs without crashing
        timeout 5s ./linux-build/metavinci --help || true
        echo "Linux executable test completed" 